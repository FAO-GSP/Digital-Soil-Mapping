# set python
reticulate::use_python(rgee_environment_dir, required=T)
rgee_environment_dir
remove.packages("rgee", lib="~/R/win-library/4.1")
# clean environment
rm(list = ls()); gc()
# general libraries
#install.packages("pacman")
library(pacman)
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = 'C:/ProgramData/Miniconda3/envs/rgee_py'
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
#######################################################
#
#  Process and download covariates
#  from GEE and Zenodo to R
#
#  Export both raw covariates and PCAs
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#######################################################
#Empty environment and cache ----
rm(list = ls());
gc()
#######################################################
#
#  User defined variables:
# Working directory
#wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Folder to store global layers from Zenodo
output_dir <-'C:/Users/hp/Documents/FAO/data/OpenLandMap/'
#output_dir <-'C:/Users/luottoi/Documents/data/OpenLandMap/'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# GEE Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# OpenLandMap Resolution 2km 1km, 250 m or 500 m
resOLM <- '1km'
#
#
#######################################################
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
library(zen4R)
library(reticulate)
#Empty environment and cache ----
rm(list = ls());
gc()
# Working directory
#wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Folder to store global layers from Zenodo
output_dir <-'C:/Users/hp/Documents/FAO/data/OpenLandMap/'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# GEE Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# OpenLandMap Resolution 2km 1km, 250 m or 500 m
resOLM <- '1km'
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
library(zen4R)
library(reticulate)
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
# Mean annual temperature (daytime) ----
ee_Initialize()
region <- sf_as_ee(AOI)
region = region$geometry()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmn")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
image <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("pr")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$sum()%>%
ee$Image$toDouble()
Pr = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
Prr <- ee_as_raster(
image = Pr,
scale= res,
region = region,
via = "drive"
)
#######################################################
#
#  Process and download covariates
#  from GEE and Zenodo to R
#
#  Export both raw covariates and PCAs
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#######################################################
#Empty environment and cache ----
rm(list = ls());
gc()
#######################################################
#
#  User defined variables:
# Working directory
#wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Folder to store global layers from Zenodo
output_dir <-'C:/Users/hp/Documents/FAO/data/OpenLandMap/'
#output_dir <-'C:/Users/luottoi/Documents/data/OpenLandMap/'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# GEE Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# OpenLandMap Resolution 2km 1km, 250 m or 500 m
resOLM <- '1km'
#
#
#######################################################
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
library(zen4R)
library(reticulate)
# Set working directory ----
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
# convert AOI to a box polygon
#AOI <- st_as_sfc(st_bbox(AOI))
#AOI <- st_as_sf(AOI)
#List of covariates to prepare
# Mean annual temperature
# Total annual Precipitation
# Precipitation of wettest month
# Precipitation of driest month
# TAGEE 13 soil attributes (list below)
# MODIS EVI & NDVI
# Daytime temperature SD
# Landsat 8 RED and NIR standard deviation
# OpenLandMap
# soil water content 0-10-30
# Potential FAPAR Monthly
# Multi-Scale Topographic Position Index
# Mean annual temperature (daytime) ----
ee_Initialize()
region <- sf_as_ee(AOI)
region = region$geometry()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmn")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
crs = proj$wkt
avT = avT$resample('bilinear')$reproject(
crs= crs,
scale= res)
avtr <- ee_as_raster(
image = avT,
scale= res,
region = region,
via = "drive"
)
writeRaster(avtr, '01-Data/covs/avtr.tif', overwrite=T)
# Total annual Precipitation ----
image <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("pr")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$sum()%>%
ee$Image$toDouble()
Pr = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
Prr <- ee_as_raster(
image = Pr,
scale= res,
region = region,
via = "drive"
)
writeRaster(Prr, '01-Data/covs/Prr.tif', overwrite=T)
# Precipitation of wettest month ----
image <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("pr")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
Prr_all = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
Prr_allr <- ee_as_raster(
image = Prr_all,
scale= res,
region = region,
via = "drive"
)
sums <- global(Prr_allr, "sum", na.rm = TRUE)
library(raster)
sums <- cellStats(Prr_allr, 'sum')
wettest <- names(sums[sums ==max(sums)])
Prr_wet <- Prr_allr[[wettest]]
writeRaster(Prr_wet, '01-Data/covs/Prr_wet.tif', overwrite=T)
dryest <- names(sums[sums ==min(sums)])
Prr_dry <- Prr_allr[[dryest]]
writeRaster(Prr_wet, '01-Data/covs/Prr_dry.tif', overwrite=T)
# install TAGEE
system("pip install tagee")
# Import
TAGEE <- import("tagee")
image <- ee$Image("MERIT/DEM/v1_0_3") %>%
ee$Image$clip(region)%>%
ee$Image$toDouble()
image = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
DEMAttributes = TAGEE$terrainAnalysis(image,region)
DEMAttributes =   DEMAttributes$unmask(0)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
plot(tageer)
writeRaster(tageer, '01-Data/covs/Terrain.tif', overwrite=T)
# EVI & NDVI ----
EVI <- ee$ImageCollection("MODIS/061/MOD13Q1") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("EVI")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
EVI = EVI$reduce(ee$Reducer$mean())
EVI = EVI$resample('bilinear')$reproject(
crs= crs,
scale= res)
NDVI <- ee$ImageCollection("MODIS/061/MOD13Q1") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("NDVI")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
NDVI = NDVI$reduce(ee$Reducer$mean())
NDVI = NDVI$resample('bilinear')$reproject(
crs= crs,
scale= res)
ndvir <- ee_as_raster(
image = NDVI,
scale= res,
region = region,
via = "drive"
)
evir <- ee_as_raster(
image = EVI,
scale= res,
region = region,
via = "drive"
)
writeRaster(ndvir, '01-Data/covs/NDVI.tif', overwrite=T)
writeRaster(evir, '01-Data/covs/EVI.tif', overwrite=T)
image <- ee$ImageCollection("MODIS/061/MOD11A1") %>%
ee$ImageCollection$filterDate("2018-01-01", "2018-12-31") %>%
ee$ImageCollection$select("LST_Day_1km")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
d_T = image$subtract(273.15)
sd_d_T = d_T$reduce(ee$Reducer$stdDev())
sd_d_T = sd_d_T$resample('bilinear')$reproject(
crs= crs,
scale= res)
sd_d_Tr <- ee_as_raster(
image = sd_d_T,
scale= res,
region = region,
via = "drive"
)
writeRaster(sd_d_Tr, '01-Data/covs/sd_d_Tr.tif', overwrite=T)
# Landsat bands mean and sd ----
image <- ee$ImageCollection("LANDSAT/LC08/C02/T1_RT") %>%
ee$ImageCollection$filterDate("2018-01-01", "2018-12-31") %>%
ee$ImageCollection$select(c("B4"))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
land_red = image$reduce(ee$Reducer$stdDev())
land_red = land_red$resample('bilinear')$reproject(
crs= crs,
scale= res)
land_sd_red <- ee_as_raster(
image = land_red,
scale= res,
region = region,
via = "drive"
)
writeRaster(land_sd_red, '01-Data/covs/land_sd_red.tif', overwrite=T)
image <- ee$ImageCollection("LANDSAT/LC08/C02/T1_RT") %>%
ee$ImageCollection$filterDate("2018-01-01", "2018-12-31") %>%
ee$ImageCollection$select(c("B5"))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
land_nir = image$reduce(ee$Reducer$stdDev())
land_nir = land_nir$resample('bilinear')$reproject(
crs= crs,
scale= res)
land_nirr <- ee_as_raster(
image = land_nir,
scale= res,
region = region,
via = "drive"
)
writeRaster(land_nirr, '01-Data/covs/land_sd_nir.tif', overwrite=T)
image <- ee$Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$Image$select(c('b0','b10','b30'))%>%
ee$Image$clip(region)
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
soil_wtr <- ee_as_raster(
image = soil_wt,
scale= res,
region = region,
via = "drive"
)
#Harmonize to 0-30 depth with a weighted average
WeightedAverage<-function(r){return(r[[1]]*(1/30)+r[[2]]*(9/30)+r[[3]]*(20/30))}
soil_wtr<-overlay(soil_wtr,fun=WeightedAverage)
writeRaster(soil_wtr, '01-Data/covs/soil_wtr.tif', overwrite=T)
image <- ee$Image("OpenLandMap/PNV/PNV_FAPAR_PROBA-V_D/v01") %>%
ee$Image$select(c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec' ))%>%
ee$Image$clip(region)
fapar = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
fapar=fapar$reduce(ee$Reducer$mean())
faparr <- ee_as_raster(
image = fapar,
scale= res,
region = region,
via = "drive"
)
writeRaster(faparr, '01-Data/covs/faparr_mean.tif', overwrite=T)
# Multi-Scale Topographic Position Index ----
image <- ee$Image("CSP/ERGo/1_0/Global/ALOS_mTPI") %>%
ee$Image$select('AVE')%>%
ee$Image$clip(region)
top_pos = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
top_posr <- ee_as_raster(
image = top_pos,
scale= res,
region = region,
via = "drive"
)
writeRaster(top_posr, '01-Data/covs/top_posr.tif', overwrite=T)
# Clip and store covariates in working directory
AOI <- vect(AOI)
files <- list.files(path = output_dir, pattern = resOLM, full.names = T)
covs <- stack(files)
covs <- rast(covs)
covs <- crop(covs, AOI)
covs <- mask(covs, AOI)
#Use one rgee raster to harmonize the covs
rgee <-rast('01-Data/covs/Prr.tif')
covs <- resample(covs, rgee)
writeRaster(covs, '01-Data/covs/olm_covs.tif', overwrite=T)
covs <- stack(covs)
x <- read_stars(covs)
library(stars)
x <- read_stars(covs)
install.packages('stars')
install.packages("stars")
?read_stars
# Upload clipped zenodo covs to gee ----
# 3. Convert a stars(raster) to ee$Image
x <-'01-Data/covs/olm_covs.tif'
x <- read_stars(x)
assetId <- sprintf("%s/%s",ee_get_assethome(),'zenodo')
ee_zenodo <- raster_as_ee(
x = x,
assetId = assetId,
overwrite = TRUE,
bucket = "rgee_dev"
)
library(googleCloudStorageR)
install.packages('googleCloudStorageR')
library(googleCloudStorageR)
assetId <- sprintf("%s/%s",ee_get_assethome(),'zenodo')
ee_zenodo <- raster_as_ee(
x = x,
assetId = assetId,
overwrite = TRUE,
bucket = "rgee_dev"
)
ee_Initialize(..., gcs = TRUE)
ee_Initialize(gcs = TRUE)
ee_Initialize(gcs = TRUE)
# Upload clipped zenodo covs to gee ----
# 3. Convert a stars(raster) to ee$Image
x <-'01-Data/covs/olm_covs.tif'
x <- read_stars(x)
assetId <- sprintf("%s/%s",ee_get_assethome(),'zenodo')
ee_zenodo <- raster_as_ee(
x = x,
assetId = assetId,
overwrite = TRUE,
bucket = "rgee_dev"
)
x
?system.file
# Upload clipped zenodo covs to gee  ----
# 3. Convert a stars(raster) to ee$Image
x <-system.file('01-Data/covs/olm_covs.tif')
x
# Upload clipped zenodo covs to gee  ----
# 3. Convert a stars(raster) to ee$Image
x <-system.file(covs)
x
# Upload clipped zenodo covs to gee  ----
# 3. Convert a stars(raster) to ee$Image
x <-system.file('01-Data/covs/olm_covs.tif', package = "stars")
x
# Upload clipped zenodo covs to gee  ----
# 3. Convert a stars(raster) to ee$Image
x <-'01-Data/covs/olm_covs.tif'
x <- read_stars(x)
x
writeRaster(covs[[1]], '01-Data/covs/olm_covs.tif', overwrite=T)
# Upload clipped zenodo covs to gee  ----
# 3. Convert a stars(raster) to ee$Image
x <-'01-Data/covs/olm_covs.tif'
x <- read_stars(x)
x
assetId <- sprintf("%s/%s",ee_get_assethome(),'zenodo')
ee_zenodo <- raster_as_ee(
x = x,
assetId = assetId,
overwrite = TRUE,
bucket = "rgee_dev"
)
assetId <- sprintf("%s/%s",ee_get_assethome(),'projects/secret-opus-351513')
assetId
# Upload clipped zenodo covs to gee  ----
# 3. Convert a stars(raster) to ee$Image
x <-'01-Data/covs/olm_covs.tif'
x <- read_stars(x)
assetId <- sprintf("%s/%s",ee_get_assethome(),'projects/secret-opus-351513')
ee_zenodo <- raster_as_ee(
x = x,
assetId = assetId,
overwrite = TRUE,
bucket = "gsprgeekey"
)
