mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
# clean environment
rm(list = ls()); gc()
# general libraries
#install.packages("pacman")
library(pacman)
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = "C:\\Users\\hp\\.conda\\envs\\rgee_py"
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = 'C:\\ProgramData\\Miniconda3\\envs\\rgee_py'
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
rgee_environment_dir
remove.packages("rgee", lib="~/R/win-library/4.1")
# clean environment
rm(list = ls()); gc()
# general libraries
#install.packages("pacman")
library(pacman)
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = 'C:/ProgramData/Miniconda3/envs/rgee_py'
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
library(jsonlite)
library(RCurl)
library(rgdal)
#Empty environment and cache ----
rm(list = ls());
gc()
# Working directory
# wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Area of interest
AOI <- '01-Data/MKD.shp'
library(jsonlite)
library(RCurl)
library(rgdal)
TOKEN = scan("~/TOKEN_ACCESS", what="character")
TOKEN = scan("~/jGqE3t5fvgymdIvQLIdu7Iy1ahCalMnDGE5eZA88bAvbsnpgkii6H3cU4Ax7", what="character")
TOKEN = scan("jGqE3t5fvgymdIvQLIdu7Iy1ahCalMnDGE5eZA88bAvbsnpgkii6H3cU4Ax7", what="character")
?scan
TOKEN = scan("https://zenodo.org/api/files/568377dd-daf8-4235-85e1-a56011ad454b", what="character")
TOKEN = scan("https://zenodo.org/api/files/jGqE3t5fvgymdIvQLIdu7Iy1ahCalMnDGE5eZA88bAvbsnpgkii6H3cU4Ax7", what="character")
#Empty environment and cache ----
rm(list = ls());
gc()
# Working directory
# wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)
# Mean annual temperature (daytime) ----
ee_Initialize()
region <- sf_as_ee(AOI)
region = region$geometry()
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmin")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
crs = proj$wkt
#Empty environment and cache ----
rm(list = ls());
gc()
# Working directory
# wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
# Mean annual temperature (daytime) ----
ee_Initialize()
region <- sf_as_ee(AOI)
region = region$geometry()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmin")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmn")%>%
ee$ImageCollection$toBands()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmn")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
crs = proj$wkt
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
soil_wtr <- ee_as_raster(
image = soil_wt,
scale= res,
region = region,
via = "drive"
)
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
soil_wtr <- ee_as_raster(
image = soil_wt,
scale= res,
region = region,
via = "drive"
)
soil_wtr <- ee_as_raster(
ImageCollection = soil_wt,
scale= res,
region = region,
via = "drive"
)
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0'))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
soil_wtr <- ee_as_raster(
image = soil_wt,
scale= res,
region = region,
via = "drive"
)
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0'))%>%
ee$ImageCollection$filterBounds(region)
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
image <- ee$ImageCollection("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
soil_wtr <- ee_as_raster(
image = image,
scale= res,
region = region,
via = "drive"
)
image <- ee$Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
image <- ee$Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select(c('b0','b10','b30'))%>%
ee$ImageCollection$filterBounds(region)
image <- ee$Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$Image$filterDate(start_T, end_T) %>%
ee$Image$select(c('b0','b10','b30'))%>%
ee$Image$filterBounds(region)
image <- ee$Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$Image$filterDate(start_T, end_T) %>%
ee$Image$select(c('b0','b10','b30'))%>%
ee$Image$clip(region)
image <- ee$Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$Image$select(c('b0','b10','b30'))%>%
ee$Image$clip(region)
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
soil_wtr <- ee_as_raster(
image = soil_wt,
scale= res,
region = region,
via = "drive"
)
soil_wtr
plot(OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01)
plot(soil_wtr)
writeRaster(soil_wtr, '01-Data/covs/soil_wtr.tif', overwrite=T)
# Remove existing objects in memory and clear memory cache
rm(list = ls());
gc()
# Set working directory
setwd("C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping/")
#####################################  Import and stack the covariates ########################################
library (sp)
library(raster)
# list all .tif files the 'covs' folder and load them in a raster stack.
# all rasters should have same extent, resoultion and coordinate system
files <- list.files(path = "01-Data/covs", pattern = "tif*$", full.names = TRUE)
covs <- stack(files)
# Explore the data
names(covs)
# Load the processed data for digital soil mapping.
# This table was prepared in the 'data_preparation_profiles' script
dat <- read.csv("02-Outputs/dat_train.csv")
# Upgrade points data frame to SpatialPointsDataFrame and define their coordinate system
coordinates(dat) <- ~ X + Y
proj4string(dat) = CRS("+init=epsg:4326") # WGS84
# Check that the points overlay with the rasters
plot(covs$avtr)
points(dat)
# Extract values from covariates to the soil points
dat <- extract(x = covs, y = dat, sp = TRUE)
summary(dat)
# Remove NA values
dat<-as.data.frame(dat)
dat <- dat[complete.cases(dat),]
# Test correlation between each covariate and the 'OCSKGMlog'
names(dat)
test_covs <- cor(x = as.matrix(dat[,9]),
y = as.matrix(dat[,c(10:34)]))
test_covs
# Select only the covariates that have correlation higher than 0.3
library(reshape)
x <- subset(melt(test_covs), value != 1 | value != NA)
x <- x[with(x, order(-abs(x$value))),]
(x <- subset(x,abs(x$value)>0.18))
(x <- subset(x,abs(x$value)>0.20))
x <- subset(melt(test_covs), value != 1 | value != NA)
x <- x[with(x, order(-abs(x$value))),]
(x <- subset(x,abs(x$value)>0.20))
selection <- as.character(x$X2)
# Leave only selected covariates in the 'covs' raster stack
covs <- covs[[selection]]
names(covs)
#Empty environment and cache ----
rm(list = ls());
gc()
# Working directory
# wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
# Mean annual temperature (daytime) ----
ee_Initialize()
region <- sf_as_ee(AOI)
region = region$geometry()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmn")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
crs = proj$wkt
image <- ee$Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01") %>%
ee$Image$select(c('b0','b10','b30'))%>%
ee$Image$clip(region)
soil_wt = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
soil_wtr <- ee_as_raster(
image = soil_wt,
scale= res,
region = region,
via = "drive"
)
#Harmonize to 0-30 depth with a weighted average
WeightedAverage<-function(r){return(r[[1]]*(1/30)+r[[2]]*(9/30)+r[[3]]*(20/30))}
soil_wtr<-overlay(soil_wtr,fun=WeightedAverage)
plot(soil_wtr)
writeRaster(soil_wtr, '01-Data/covs/soil_wtr.tif', overwrite=T)
# This script is a part of the FAO/GSP training course on Digital Soil Mapping.
# It is used to prepare and select covariates for digital soil mapping of SOC stocks.
# It can be modified to be used for mapping other soil properties.
#################################################################################################################
# Remove existing objects in memory and clear memory cache
rm(list = ls());
gc()
# Set working directory
setwd("C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping/")
#####################################  Import and stack the covariates ########################################
library (sp)
library(raster)
# list all .tif files the 'covs' folder and load them in a raster stack.
# all rasters should have same extent, resoultion and coordinate system
files <- list.files(path = "01-Data/covs", pattern = "tif*$", full.names = TRUE)
covs <- stack(files)
# Explore the data
names(covs)
#####################################  Select the covariates using correlation analysis #############################
# Load the processed data for digital soil mapping.
# This table was prepared in the 'data_preparation_profiles' script
dat <- read.csv("02-Outputs/dat_train.csv")
# Upgrade points data frame to SpatialPointsDataFrame and define their coordinate system
coordinates(dat) <- ~ X + Y
proj4string(dat) = CRS("+init=epsg:4326") # WGS84
# Check that the points overlay with the rasters
plot(covs$avtr)
points(dat)
# Extract values from covariates to the soil points
dat <- extract(x = covs, y = dat, sp = TRUE)
summary(dat)
# Remove NA values
dat<-as.data.frame(dat)
dat <- dat[complete.cases(dat),]
# Test correlation between each covariate and the 'OCSKGMlog'
names(dat)
test_covs <- cor(x = as.matrix(dat[,9]),
y = as.matrix(dat[,c(10:34)]))
test_covs
# Select only the covariates that have correlation higher than 0.3
library(reshape)
x <- subset(melt(test_covs), value != 1 | value != NA)
x <- x[with(x, order(-abs(x$value))),]
(x <- subset(x,abs(x$value)>0.20))
selection <- as.character(x$X2)
# Leave only selected covariates in the 'covs' raster stack
covs <- covs[[selection]]
names(covs)
# This script is a part of the FAO/GSP training course on Digital Soil Mapping.
# It is used to prepare and select covariates for digital soil mapping of SOC stocks.
# It can be modified to be used for mapping other soil properties.
#################################################################################################################
# Remove existing objects in memory and clear memory cache
rm(list = ls());
gc()
# Set working directory
setwd("C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping/")
#####################################  Import and stack the covariates ########################################
library (sp)
library(raster)
# list all .tif files the 'covs' folder and load them in a raster stack.
# all rasters should have same extent, resoultion and coordinate system
files <- list.files(path = "01-Data/covs", pattern = "tif*$", full.names = TRUE)
covs <- stack(files)
# Explore the data
names(covs)
#####################################  Select the covariates using correlation analysis #############################
# Load the processed data for digital soil mapping.
# This table was prepared in the 'data_preparation_profiles' script
dat <- read.csv("02-Outputs/dat_train.csv")
# Upgrade points data frame to SpatialPointsDataFrame and define their coordinate system
coordinates(dat) <- ~ X + Y
proj4string(dat) = CRS("+init=epsg:4326") # WGS84
# Check that the points overlay with the rasters
plot(covs$avtr)
points(dat)
# Extract values from covariates to the soil points
dat <- extract(x = covs, y = dat, sp = TRUE)
summary(dat)
# Remove NA values
dat<-as.data.frame(dat)
dat <- dat[complete.cases(dat),]
# Test correlation between each covariate and the 'OCSKGMlog'
names(dat)
test_covs <- cor(x = as.matrix(dat[,9]),
y = as.matrix(dat[,c(10:32)]))
test_covs
# Select only the covariates that have correlation higher than 0.3
library(reshape)
x <- subset(melt(test_covs), value != 1 | value != NA)
x <- x[with(x, order(-abs(x$value))),]
(x <- subset(x,abs(x$value)>0.20))
selection <- as.character(x$X2)
# Leave only selected covariates in the 'covs' raster stack
covs <- covs[[selection]]
names(covs)
