colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
mp <- mp[mp$Region == reg,]
mp <- mp[complete.cases(mp$`Submission status`),]
rm(list=ls())
un_dir <- 'C:/Users/luottoi/Documents/data/UN-Borders'
#Select Region
#[1] "Asia"                        "Europe"                      "NENA"
#[4] "Africa"                      "Latin America and Caribbean" "Pacific"
#[7] "North America"
reg <- "Europe"
notsb <- c('IDN','KOR', 'MAR')
AFACI <-c('BGD', 'BHU',
'KHM', 'IDN', 'KGZ', 'LAO',  'MNG', 'MMR', 'NPL', 'THA','PHL', 'LKA', 'VNM','KOR' )
NENAtcp <- c('EGY',
'IRN',
'IRG',
'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
# coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
rm(list=ls())
un_dir <- 'C:/Users/luottoi/Documents/data/UN-Borders'
#Select Region
#[1] "Asia"                        "Europe"                      "NENA"
#[4] "Africa"                      "Latin America and Caribbean" "Pacific"
#[7] "North America"
reg <- "Asia"
notsb <- c('IDN','KOR', 'MAR')
AFACI <-c('BGD', 'BHU',
'KHM', 'IDN', 'KGZ', 'LAO',  'MNG', 'MMR', 'NPL', 'THA','PHL', 'LKA', 'VNM','KOR' )
NENAtcp <- c('EGY',
'IRN',
'IRG',
'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
mp <- mp[complete.cases(mp$`Submission status`),]
#Red not submitted #A6DBA0
# Green submitted #CA562C
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
# coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
rm(list=ls())
un_dir <- 'C:/Users/luottoi/Documents/data/UN-Borders'
#Select Region
#[1] "Asia"                        "Europe"                      "NENA"
#[4] "Africa"                      "Latin America and Caribbean" "Pacific"
#[7] "North America"
reg <- "Europe"
notsb <- c('IDN','KOR', 'MAR')
AFACI <-c('BGD', 'BHU',
'KHM', 'IDN', 'KGZ', 'LAO',  'MNG', 'MMR', 'NPL', 'THA','PHL', 'LKA', 'VNM','KOR' )
NENAtcp <- c('EGY',
'IRN',
'IRG',
'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
mp <- mp[complete.cases(mp$`Submission status`),]
#Red not submitted #A6DBA0
# Green submitted #CA562C
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
rm(list=ls())
un_dir <- 'C:/Users/luottoi/Documents/data/UN-Borders'
#Select Region
#[1] "Asia"                        "Europe"                      "NENA"
#[4] "Africa"                      "Latin America and Caribbean" "Pacific"
#[7] "North America"
reg <- "NENA"
notsb <- c('IDN','KOR', 'MAR')
AFACI <-c('BGD', 'BHU',
'KHM', 'IDN', 'KGZ', 'LAO',  'MNG', 'MMR', 'NPL', 'THA','PHL', 'LKA', 'VNM','KOR' )
NENAtcp <- c('EGY',
'IRN',
'IRG',
'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
mp <- mp[complete.cases(mp$`Submission status`),]
#Red not submitted #A6DBA0
# Green submitted #CA562C
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
#########################################
#
# Digital Soil Mapping
# Soil Profile Data
# Cleaning and Processing
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#########################################
#Empty environment and cache ----
rm(list = ls());
gc()
#######################################################
#
#  User defined variables:
# Working directory
#wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
#
#
#######################################################
# Load libraries ----
library(data.table)
library(mpspline2)
# Set working directory Module I ----
setwd(wd)
# Import, explore and clean the data ----
## Import soil layers (horizons) data from a .csv table
### To load excel file (and a specific sheet):
# library("readxl")
# dat_layers <-read_excel("Path where your Excel file is stored\\File Name.xlsx",sheet = "Your sheet name")
dat_layers <- fread(file = "01-Data/horizons.csv")
# Explore the data
str(dat_layers)
#########################################
#
# Digital Soil Mapping
# Soil Profile Data
# Cleaning and Processing
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#########################################
#Empty environment and cache ----
rm(list = ls());
gc()
#######################################################
#
#  User defined variables:
# Working directory
wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
#wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
#
#
#######################################################
# Load libraries ----
library(data.table)
library(mpspline2)
# Set working directory Module I ----
setwd(wd)
# dat_layers <-read_excel("Path where your Excel file is stored\\File Name.xlsx",sheet = "Your sheet name")
dat_layers <- fread(file = "01-Data/horizons.csv")
# Explore the data
str(dat_layers)
#########################################
#
# Digital Soil Mapping
# Soil Profile Data
# Cleaning and Processing
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#########################################
#Empty environment and cache ----
rm(list = ls());
gc()
#######################################################
#
#  User defined variables:
# Working directory
wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
#wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
#
#
#######################################################
# Load libraries ----
library(data.table)
library(mpspline2)
# Set working directory Module I ----
setwd(wd)
# Import, explore and clean the data ----
## Import soil layers (horizons) data from a .csv table
### To load excel file (and a specific sheet):
# library("readxl")
# dat_layers <-read_excel("Path where your Excel file is stored\\File Name.xlsx",sheet = "Your sheet name")
dat_layers <- fread(file = "01-Data/horizons.csv")
# Explore the data
str(dat_layers)
summary(dat_layers)
# Import site-level data from a .csv table
dat_sites <- fread(file = "01-Data/site-level.csv")
# Explore the data
str(dat_sites)
summary(dat_sites)
# Remove duplicate profiles (the site data should contain unique profile locations)
test <- duplicated(dat_sites[,.(ProfID,soiltype,X,Y)]) # are there duplicates present, based on similar coordinates and profile id?
summary(test)
dat_sites <-  dat_sites[!duplicated(dat_sites[,.(ProfID,soiltype,X,Y)]),]
# Merge site-level data with soil layers (horizons)  data
dat <- merge(x=dat_sites, y=dat_layers, by="ProfID")
summary(dat)
names (dat)
# Simplify the table by choosing only the parameters that are needed to model the selected soil attributes:
# Note that SOC is OM/1.724 (OM - organic matter)
data <- data.frame(id=dat$ProfID,
X=dat$X,
Y=dat$Y,
soil=dat$soiltype,
top=dat$DepthFrom,
bottom=dat$DepthTo,
SOC=dat$OM_perc/1.724,
clay = dat$Clay_perc,
pH = dat$pH_H2O,
BLD=dat$Bulk_density_gcm3,
CRF=dat$Stones_perc)
# Soil Organic Carbon ----
# Explore and clean the SOC data
summary(data$SOC)
dat <- data[complete.cases(data$SOC),] # remove NA values
dat <- dat[dat$SOC>0,] # remove 0 values
# Explore SOC data, identify outliers
summary(dat$SOC)
hist(dat$SOC, breaks=100)
boxplot(dat$SOC, horizontal=TRUE)
# Outliers should be carefully explored and compared with literature values.
# Only if it is clear that outliers represent impossible or highly unlikely values,
# they should be removed as errors.
summary(dat[dat$SOC>15,])
# Carbon content higher than 15% is only typical for organic soil (histosols)
# We will remove all non-histosols with atypically high SOC as outliers
dat <- dat[ !(dat$SOC>15 & dat$soil!='Histosol'),]
# Explore bulk density data, identify outliers
summary(dat$BLD)
dat$BLD[dat$BLD==0]<-NA   # bulk density cannot be 0, it must be NA
hist(dat$BLD, breaks=50)
boxplot(dat$BLD, horizontal=TRUE)$out
# BLD values higher than 2.5 g?cm are not typical for fine earth,
#   and most likely correspond to coarse fragments; they should be removed
dat <- dat[!(dat$BLD>=2.5 & !is.na(dat$BLD)),]
# BLD values lower than 1 g?cm3 can only correspond to organic soils (Histosols)
# We should check if all low BLD values correspond to Histosols
summary(dat[dat$BLD<1,])
# BLD values lower than 1 g?cm3 can only correspond to organic soils (Histosols)
# We should check if all low BLD values correspond to Histosols
dat[dat$BLD<1,]
# BLD values lower than 1 g?cm3 can only correspond to organic soils (Histosols)
# We should check if all low BLD values correspond to Histosols
dat[dat$BLD<1,'soil']
# BLD values lower than 1 g?cm3 can only correspond to organic soils (Histosols)
# We should check if all low BLD values correspond to Histosols
dat[dat$BLD<1 & complete.cases(dat$BLD),'soil']
?ee_Initialize
#######################################################
#
#  Process and download covariates
#  from GEE and Zenodo to R
#
#  Export both raw covariates and PCAs
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#######################################################
#Empty environment and cache ----
rm(list = ls());
gc()
#######################################################
#
#  User defined variables:
# Working directory
wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
#wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Folder to store global layers from Zenodo
#output_dir <-'C:/Users/hp/Documents/FAO/data/OpenLandMap/'
output_dir <-'C:/Users/luottoi/Documents/data/OpenLandMap/'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# GEE Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# OpenLandMap Resolution 2km 1km, 250 m or 500 m
resOLM <- '1km'
#
#
#######################################################
# Load libraries ----
library(data.table)
library(raster)
library(sf)
library(rgee)
library(zen4R)
library(reticulate)
# Set working directory ----
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
# convert AOI to a box polygon
#AOI <- st_as_sfc(st_bbox(AOI))
#AOI <- st_as_sf(AOI)
#List of covariates to prepare
# Mean annual temperature
# Total annual Precipitation
# Precipitation of wettest month
# Precipitation of driest month
# TAGEE 13 soil attributes (list below)
# MODIS EVI & NDVI
# Daytime temperature SD
# Landsat 8 RED and NIR standard deviation
# OpenLandMap
# soil water content 0-10-30
# Potential FAPAR Monthly
# Multi-Scale Topographic Position Index
# Mean annual temperature (daytime) ----
ee_Initialize()
