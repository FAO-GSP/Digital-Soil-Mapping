library(patchwork)
sf::sf_use_s2(FALSE)
## redefine str for the width option
str <- function(...){
utils::str(..., strict.width = "cut")}
# reproducible results
set.seed(123)
## Boolean object for running all the code #####
# if FALSE will use precalculated RK prediction and svm tuning
#RUN.ALL <- TRUE
# Cache results
knitr::opts_chunk$set(cache=F,fig.pos = 'H',dev = "cairo_pdf")
addline_format <- function(x,...){
gsub('\\s','\n',x)
}
underscore_to_space <- function(x,...){
gsub("_", " ",x)
}
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1B9qukBJehe7p0T4TkwR8A4tUMLs8LkP5m6nlM9ae4ZM/edit#gid=2110860500"
##sheet of interest for the map
gs4_deauth()
sheet <- "Master"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet$date <- substr(gsheet$Timestamp, 1, 10)
gsheet$date <- as.Date(gsheet$date)
gsheet <-gsheet[, c("ISO", "Country") := tstrsplit(Country, "; ", fixed=TRUE)]
gsheet[, "Country"] <- NULL
#Select unique latest observation
gsheet <-unique(gsheet[order(date)], by="ISO", fromLast=TRUE)
submitted <- unique(gsheet$ISO)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- gsheet[,2:3]
names(gsheet)[1] <-'ISO'
names(gsheet)[2] <-'ROMNAM'
setwd('C:/Users/hp/Documents/GitHub/GSOCseq-Technical-Report')
c_data <- fread("output_data/World_map_All_GSOCseq_stats_allscenarios.csv")
md <- fread("output_data/static/metadata_ISO.csv")
md <- md[!ROMNAM== "Ashmore and Cartier Islands",]
md <- md[!duplicated(md$ISO3CD),]
colnames(md)[2] <- "zone"
nocs1 <- fread('output_data/static/nocs_id_short_name.csv')
nocs2 <- fread('output_data/static/ISO_nocs.csv')
nocs <- merge(nocs1, nocs2, by = 'ID', all.x=T)
rm(nocs1)
rm(nocs2)
names(nocs)[5] <- 'ISO'
md <- merge(md, nocs, by='ISO', all.x=T)
md <- md[,c('ISO', 'zone', 'SHORT NAME')]
names(md)[3] <- 'ROMNAM'
reg <- fread("output_data/static/GSP_regions.csv")
#Convert to Mt
c_data$sum <- round(c_data$sum/1000000,3)
c_data$sun <- round(c_data$sun/1000000,3)
c_data$mean <- round(c_data$mean,3)
c_data$mun <- round(c_data$mun,3)
#long to wide (we are using sum function to combine islands)
c_data <-dcast(c_data,zone ~ product, value.var = c("sum","sun", "mean", "mun"))
totRSR3 <- sum(na.omit(c_data$sum_RSR_SSM3))
c_data$per <- (c_data$sum_RSR_SSM3/totRSR3)*100
c_data$per <- round(c_data$per,1)
c_data <- merge(c_data, md, by= "zone", all.x=TRUE)
c_data <- merge(c_data, reg[, .(ISO, Region)], by = "ISO", all.x =TRUE)
c_data <- c_data[c_data$ROMNAM != "Ilemi Triangle",]
c_data <- c_data[c_data$ROMNAM != "Bird Island",]
c_data$tot <- paste(c_data$sum_RSR_SSM3, 'ÃÂ±', c_data$sun_RSR_SSM3)
c_data$mean <- paste(c_data$mean_RSR_SSM3, 'ÃÂ±',c_data$mun_RSR_SSM3)
c_data$source <- ifelse(c_data$ISO %in%  submitted , "National Submission", "Gap-filled")
gap <-c("BRA","UKR","IDN")
c_data <- subset(c_data, !(c_data$ISO %in% blanks))
c_data$source <- ifelse(c_data$ISO %in%  gap , "Gap-filled", c_data$source)
#Order according to total RSR Mt/yr
c_data <- c_data[order(-sum_RSR_SSM3),]
#Select top 15
c_data1 <- c_data[,.(ROMNAM, tot, mean, source)]
colnames(c_data1) <- c("Country", "Total RSR SSM3", "Mean RSR SSM3",  "Map Source")
colNames <- colnames(c_data1)
# dfUnits1 <- c("",  "$Mt$ C $yr^{-1}$", "$t$ C $ha^{-1}$ $yr^{-1}$" , "")
# colNames <- colnames(c_data1)
# kable(booktabs= TRUE,c_data1, col.names = dfUnits1, align = "l", digits = 3,
#       caption = "Countries in descending order according to total SOC Relative Sequestration Rates based on the Sustainable Soil Management Scenario 3.",format = 'latex', escape = FALSE, longtable=T)%>%
#   add_header_above(header = colNames, line = F, align = "c")%>%
#  kable_classic(latex_options = c( "repeat_header"),repeat_header_text = "",
#                full_width = F, font_size = 7)%>%
#   footnote("The  symbol '±' denotes the upper and lower limits of  the estimated SOC stocks  (t C/ha/yr for mean SOC content; Mt C/yr for total SOC stocks) derived from the uncertainty ranges (95% confidence interval) of selected input layers. ÃÂ±0 inidicates values smaller than 1e-4 Mt C /yr and/or 1e-4 t C /ha/yr.", general_title = "", threeparttable =T)
library(flextable)
Table<- flextable(c_data1)
Table %>%
# align(part = "all") %>% # left align
set_caption(caption = "Countries in descending order according to total SOC Relative Sequestration Rates based on the Sustainable Soil Management Scenario 3.") %>%
# font(fontname = "Calibri (Body)", part = "all") %>%
fontsize(size = 10, part = "body") %>%
# add footer if you want
# add_footer_row(values = "* p < 0.05. ** p < 0.01. *** p < 0.001.",
#                colwidths = 4) %>%
theme_booktabs() %>% # default theme
autofit() %>% fit_to_width(7.5)
View(c_data1)
unlink("C:/Users/hp/Desktop/test_cache", recursive = TRUE)
# Load libraries
library(data.table)
library(mpspline2)
#########################################
#
# GSOCmap v2 & GSOCseq V2 | Module I
# SOC map and Clay layer preparation
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#########################################
#Empty environment and cache
rm(list = ls());
gc()
# Load libraries
library(data.table)
library(mpspline2)
#Empty environment and cache ----
rm(list = ls());
gc()
# Load libraries ----
library(data.table)
library(mpspline2)
# Set working directory Module I ----
setwd("../../../Module I")
getwd()
rm(list = ls());
gc()
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
rgee::ee_install()
ee_check() # Check non-R dependencies
rgee::ee_Initialize()
# clean environment
rm(list = ls()); gc()
# general libraries
#install.packages("pacman")
library(pacman)
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = "C:\\Users\\hp\\anaconda3\\envs\\rgee_py"
# set python
reticulate::use_python(rgee_environment_dir, required=T)
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = "C:/Users/hp/anaconda3/envs/rgee_py/"
# set python
reticulate::use_python(rgee_environment_dir, required=T)
reticulate::conda_list()
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = "   C:\\Users\\hp\\anaconda3\\envs\\rgee_py"
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# set python
reticulate::use_python(rgee_environment_dir, required=T)
getwd()
reticulate::conda_list()
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = "C:\\Users\\hp\\.conda\\envs\\rgee_py"
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
# clean environment
rm(list = ls()); gc()
# general libraries
#install.packages("pacman")
library(pacman)
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = "C:\\Users\\hp\\.conda\\envs\\rgee_py"
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = 'C:\\ProgramData\\Miniconda3\\envs\\rgee_py'
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
rgee_environment_dir
remove.packages("rgee", lib="~/R/win-library/4.1")
# clean environment
rm(list = ls()); gc()
# general libraries
#install.packages("pacman")
library(pacman)
## copy the path to the rgee_py environment, you will need it set in the variable below inside R:
## note the use of double backslashes \\
## this below is where is located in MY computer, you have to use the 'conda env list' command to find where it is located on yours
rgee_environment_dir = 'C:/ProgramData/Miniconda3/envs/rgee_py'
# install/load general packages used in the scripts
p_load(raster,
rgdal,
rgeos,
gdalUtils,
sp,
sf,
leaflet,
mapview,
caret)
# now some more specific packages related to using the rgee
p_load(rgee, geojsonio, remotes, reticulate, devtools, googledrive)
install_github("r-spatial/rgee")
# set python
reticulate::use_python(rgee_environment_dir, required=T)
#Empty environment and cache ----
rm(list = ls());
gc()
# Working directory
# wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Folder to store global layers from Zenodo
output_dir <-'C:/Users/hp/Documents/FAO/data/OpenLandMap/'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# GEE Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# OpenLandMap Resolution 2km 1km, 250 m or 500 m
resOLM <- '1km'
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
#install.packages('zen4R')
library(zen4R)
library(reticulate)
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
# Mean annual temperature (daytime) ----
ee_Initialize()
region <- sf_as_ee(AOI)
region = region$geometry()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmn")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
# install TAGEE
#system("pip install tagee")
# Import
TAGEE <- import("tagee")
image <- ee$Image("MERIT/DEM/v1_0_3") %>%
ee$Image$clip(region)%>%
ee$Image$toDouble()
image = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
DEMAttributes = TAGEE$terrainAnalysis( image, region)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
# install TAGEE
#system("pip install tagee")
# Import
TAGEE <- import("tagee")
image <- ee$Image("MERIT/DEM/v1_0_3") %>%
ee$Image$clip(region)%>%
ee$Image$toDouble()
image = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
DEMAttributes = TAGEE$terrainAnalysis( image, region)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
# install TAGEE
system("pip install tagee")
# Import
TAGEE <- import("tagee")
image <- ee$Image("MERIT/DEM/v1_0_3") %>%
ee$Image$clip(region)%>%
ee$Image$toDouble()
image = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
DEMAttributes = TAGEE$terrainAnalysis( image, region)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
DEMAttributes = TAGEE$terrainAnalysis(image, region)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
library(reticulate)
?system
?import
#######################################################
#
#  Process and download covariates
#  from GEE and Zenodo to R
#
#  Export both raw covariates and PCAs
#
# GSP-Secretariat
# Contact: Isabel.Luotto@fao.org
#
#######################################################
#Empty environment and cache ----
rm(list = ls());
gc()
#######################################################
#
#  User defined variables:
# Working directory
# wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
# Folder to store global layers from Zenodo
output_dir <-'C:/Users/hp/Documents/FAO/data/OpenLandMap/'
#output_dir <-'C:/Users/luottoi/Documents/data/OpenLandMap/'
# Area of interest
AOI <- '01-Data/MKD.shp'
#Start and End time
start_T <- "2017-01-01"
end_T <- "2017-12-31"
# GEE Resolution (CRS defined based on the first TerraClimate layer WGS84 )
res = 1000
# OpenLandMap Resolution 2km 1km, 250 m or 500 m
resOLM <- '1km'
#
#
#######################################################
# Load libraries ----
library(data.table)
library(terra)
library(sf)
library(rgee)
library(zen4R)
library(reticulate)
# Set working directory ----
setwd(wd)
# Country shapefile
AOI <- read_sf(AOI)
# convert AOI to a box polygon
#AOI <- st_as_sfc(st_bbox(AOI))
#AOI <- st_as_sf(AOI)
#List of covariates to prepare
# Mean annual temperature
# Total annual Precipitation
# Precipitation of wettest month
# Precipitation of driest month
# TAGEE 13 soil attributes (list below)
# MODIS EVI & NDVI
# Daytime temperature SD
# Landsat 8 RED and NIR standard deviation
# OpenLandMap
# soil water content 0-10-30
# Potential FAPAR Monthly
# Multi-Scale Topographic Position Index
# Mean annual temperature (daytime) ----
ee_Initialize()
region <- sf_as_ee(AOI)
region = region$geometry()
image1 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmx")%>%
ee$ImageCollection$filterBounds(region)%>%
ee$ImageCollection$toBands()
# from imagecollection to image
image2 <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate(start_T, end_T) %>%
ee$ImageCollection$select("tmmn")%>%
ee$ImageCollection$toBands()
image1 <- image1$multiply(0.1)
image2 <- image2$multiply(0.1)
diff <- image1$add(image2)
avT = diff$divide(2)
avT = avT$reduce(ee$Reducer$mean())
proj = avT$projection()$getInfo()
# install TAGEE
system("pip install tagee")
# Import
TAGEE <- import("tagee")
image <- ee$Image("MERIT/DEM/v1_0_3") %>%
ee$Image$clip(region)%>%
ee$Image$toDouble()
image = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
DEMAttributes = TAGEE$terrainAnalysis(image, region)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
DEMAttributes = TAGEE$terrainAnalysis(image)
DEMAttributes = TAGEE$terrainAnalysis(image,region)
DEMAttributes
res
region
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
image <- ee$Image("MERIT/DEM/v1_0_3") %>%
ee$Image$clip(region)%>%
ee$Image$toDouble()
image = image$resample('bilinear')$reproject(
crs= crs,
scale= res)
DEMAttributes = TAGEE$terrainAnalysis(image,region)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
tageer <- ee_as_raster(
image = DEMAttributes,
scale= res,
region = region,
via = "drive"
)
