'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
# coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
rm(list=ls())
un_dir <- 'C:/Users/luottoi/Documents/data/UN-Borders'
#Select Region
#[1] "Asia"                        "Europe"                      "NENA"
#[4] "Africa"                      "Latin America and Caribbean" "Pacific"
#[7] "North America"
reg <- "Asia"
notsb <- c('IDN','KOR', 'MAR')
AFACI <-c('BGD', 'BHU',
'KHM', 'IDN', 'KGZ', 'LAO',  'MNG', 'MMR', 'NPL', 'THA','PHL', 'LKA', 'VNM','KOR' )
NENAtcp <- c('EGY',
'IRN',
'IRG',
'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
mp <- mp[complete.cases(mp$`Submission status`),]
#Red not submitted #A6DBA0
# Green submitted #CA562C
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
# coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
rm(list=ls())
un_dir <- 'C:/Users/luottoi/Documents/data/UN-Borders'
#Select Region
#[1] "Asia"                        "Europe"                      "NENA"
#[4] "Africa"                      "Latin America and Caribbean" "Pacific"
#[7] "North America"
reg <- "Europe"
notsb <- c('IDN','KOR', 'MAR')
AFACI <-c('BGD', 'BHU',
'KHM', 'IDN', 'KGZ', 'LAO',  'MNG', 'MMR', 'NPL', 'THA','PHL', 'LKA', 'VNM','KOR' )
NENAtcp <- c('EGY',
'IRN',
'IRG',
'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
mp <- mp[complete.cases(mp$`Submission status`),]
#Red not submitted #A6DBA0
# Green submitted #CA562C
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
rm(list=ls())
un_dir <- 'C:/Users/luottoi/Documents/data/UN-Borders'
#Select Region
#[1] "Asia"                        "Europe"                      "NENA"
#[4] "Africa"                      "Latin America and Caribbean" "Pacific"
#[7] "North America"
reg <- "NENA"
notsb <- c('IDN','KOR', 'MAR')
AFACI <-c('BGD', 'BHU',
'KHM', 'IDN', 'KGZ', 'LAO',  'MNG', 'MMR', 'NPL', 'THA','PHL', 'LKA', 'VNM','KOR' )
NENAtcp <- c('EGY',
'IRN',
'IRG',
'LBN',
'MAR',
'OMN',
'PSA',
'SDN',
'SYR',
'TUN',
'YEM')
#Activate packages
library(data.table)
library(googlesheets4)
library(ggplot2)
library(sf)
#Add dynamic submission column
#Data to be imported from google sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1QZj0VhWQtYyAl39E5xIRePR7eCBjWxo1rErF5S3vuu0/edit#gid=0"
##sheet of interest for the map
gs4_deauth()
sheet <- "Country Overview"
gsheet <- read_sheet(sheet_url, sheet =sheet)
gsheet <- as.data.table(gsheet)
gsheet <-gsheet[, c("ISO", "Country", "Region", "Submission status", "INSII")]
#Select unique latest observation
gsheet$`Submission status`<- ifelse(is.na(gsheet$`Submission status`), 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  notsb, 'Not Submitted', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  AFACI & !gsheet$`Submission status`== 'Submitted', 'AFACI Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  NENAtcp & !gsheet$`Submission status`== 'Submitted', 'NENA TCP Project (in progress)', gsheet$`Submission status`)
gsheet$`Submission status`<- ifelse(gsheet$ISO %in%  'CHN', 'in progress', gsheet$`Submission status`)
mp <- st_read(paste0(un_dir, '/UN_2020_0_fixed_geom.shp'))
colnames(mp)[1] <- 'ISO'
mp$ISO <- ifelse(mp$ISO == 'PSE','PSA',mp$ISO)
mp$ISO <- ifelse(mp$ISO == 'ESH','MAR',mp$ISO)
mp <- merge(mp, gsheet, by= 'ISO', all.x=T)
#Subset for region
mp <- mp[mp$Region == reg,]
mp <- mp[complete.cases(mp$`Submission status`),]
#Red not submitted #A6DBA0
# Green submitted #CA562C
colours <-c("Not Submitted" = '#CA562C', 'Submitted'='#A6DBA0',"in progress"='orange',
"NENA TCP Project (in progress)" ='#FFD733', "AFACI Project (in progress)" ='#FFD733')
fig <-ggplot() +
geom_sf(data= mp, aes(color = factor(`Submission status`),fill = factor(`Submission status`)))+
geom_sf(data= points,aes(color = factor(status)), shape=19)+
coord_sf(crs = st_crs('ESRI:54030')) +
scale_fill_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
scale_color_manual("",values=colours, drop=T,breaks = sort(unique(mp$`Submission status`)))+
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
# Customize margin values (top, right, bottom, left)
plot.margin = margin(20, 40, 20, 40),
# Use a light grey color for the background of both the plot and the panel
plot.background = element_rect(fill = "transparent", color = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"))+
labs(caption= 'Source: UN, 2020. Map of the World, United Nations.')
fig
#Empty environment and cache
rm(list = ls());
gc()
# Working directory
wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
#wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
#List of soil attributes prepared in script #2
soilatt <- c('OCS','clay', 'pH')
AOI <- '01-Data/MKD.shp'
#
#
#######################################################
# Set working directory
setwd(wd)
############################### Prapare the final table for modelling (regression matrix)
library(tidyverse)
library(data.table)
library(caret)
library(quantregForest)
library(terra)
library(sf)
library(doParallel)
# Load PC covariates (the same for all soil attributes)
covs_pc <- rast('02-Outputs/PCA_covariates.tif')
#Merge tiles both prediction and st.Dev
f_mean <- list.files(path = "02-Outputs/Final Maps/tiles/", pattern = "tile_", full.names = TRUE)
f_sd <- list.files(path = "02-Outputs/Final Maps/tiles/", pattern = "tileSD", full.names = TRUE)
r_mean_l <- list()
r_sd_l <- list()
for (i in 1:length(f_mean)){
r <- rast(f_mean[i])
r_mean_l[i] <-r
rm(r)
}
for (i in 1:length(f_sd)){
r <- rast(f_sd[i])
r_sd_l[i] <-r
rm(r)
}
r_mean <-sprc(r_mean_l)
r_sd <-sprc(r_sd_l)
pred_mean <- mosaic(r_mean)
pred_sd <- mosaic(r_sd)
plot(pred_mean)
plot(pred_sd)
j=1
i='OCS'
#Load data and covariates stacks based on correlation
covs <-rast( paste0("02-Outputs/", i,"_covariates.tif"))
r <-covs[[1]]
t <- rast(nrows = 5, ncols = 5, extent = ext(r), crs = crs(r))
tile <- makeTiles(r, t,overwrite=TRUE,filename="02-Outputs/tiles/tiles.tif")
t <- rast(tile[j])
covst <- crop(covs, t)
# plot(r)#
pred_mean <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what="mean",
# filename = paste0("02-Outputs/Final Maps/tiles/", i,"_tile_", j, ".tif"),
overwrite = TRUE)
model <-readRDS(file = paste0("02-Outputs/model_", i, ".rds"))
final_mod <-model
# plot(r)#
pred_mean <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what="mean",
# filename = paste0("02-Outputs/Final Maps/tiles/", i,"_tile_", j, ".tif"),
overwrite = TRUE)
pred_mean$lyr1
?predict
?randomForest
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what="sd",
#filename = paste0("02-Outputs/Final Maps/tiles/", i,"_tile_", j, ".tif"),
overwrite = TRUE)
pred_sd
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what="sd")
pred_sd
pred_sd$lyr1
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what=sd)
pred_sd
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what="sd")
pred_sd
# plot(r)#
pred_mean <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="‘quantregForest’", what="mean",
# filename = paste0("02-Outputs/Final Maps/tiles/", i,"_tile_", j, ".tif"),
overwrite = TRUE)
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="‘quantregForest’", what="sd")
pred_sd
?predict
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what=sd)
pred_sd
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", type='sd')
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest")
pred_sd
#empty global environment
rm(list = ls())
gc()
## Working directory
datafolder <- "C:/Users/luottoi/Documents/GBSmap/"
setwd(datafolder)
#Load packages
library(terra)
library(data.table)
gseq <- rast('../GSOCseq/GSOCseq_V1.1.1/GSOCseq_RSR_SSM3_Map030.tif')
gbsmap <- rast('GBSmap-probability-v1.0.tif')
plot(gpsmap)
gbsmap <- rast('GBSmap-probability-v1.0.tif')
plot(gbsmap)
#List of INBS countries
inbs_countries <- c("United States of America", "Canada", "Kazakhstan", "China",
"Russian Federation", "Hungary", "Ukraine", "Argentina",
"Kyrgyzstan", "Moldova", "Indonesia", "Turkey", "Brazil",
"Mongolia", "Uruguay", "Bulgaria", "Slovakia", "Mozambique",
"Syrian Arab Republic", "Iraq", "Zambia", "Morocco",
"Armenia", "Chile", "South Africa", "Poland", "Nepal",
"Thailand", "Colombia", "Georgia", "Mexico")
UN <- UN[UN$ROMNAM %in% inbs_countries]
UN <- vect('../data/UN-Borders/UN_2020_0_fixed_geom.shp')
#List of INBS countries
inbs_countries <- c("United States of America", "Canada", "Kazakhstan", "China",
"Russian Federation", "Hungary", "Ukraine", "Argentina",
"Kyrgyzstan", "Moldova", "Indonesia", "Turkey", "Brazil",
"Mongolia", "Uruguay", "Bulgaria", "Slovakia", "Mozambique",
"Syrian Arab Republic", "Iraq", "Zambia", "Morocco",
"Armenia", "Chile", "South Africa", "Poland", "Nepal",
"Thailand", "Colombia", "Georgia", "Mexico")
UN <- UN[UN$ROMNAM %in% inbs_countries]
gbsmap[gbsmap$GBSmap_v1.0<50] <- 0
gbsmap[gbsmap$GBSmap_v1.0>=50] <- 1
gseq_un <- rast('../GSOCseq/GSOCseq_V1.1.1/GSOCseq_RSR_SSM3_UncertaintyMap030.tif')
gseq_bs <- gseq*gbsmap
gseq_bs_un <- gseq_un*gbsmap
gbsmap <- resample(gbsmap, gseq)
#Empty environment and cache
rm(list = ls());
gc()
# Working directory
wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
#wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
#List of soil attributes prepared in script #2
soilatt <- c('OCS','clay', 'pH')
AOI <- '01-Data/MKD.shp'
#
#
#######################################################
# Set working directory
setwd(wd)
############################### Prapare the final table for modelling (regression matrix)
library(tidyverse)
library(data.table)
library(caret)
library(quantregForest)
library(terra)
library(sf)
library(doParallel)
# Load PC covariates (the same for all soil attributes)
covs_pc <- rast('02-Outputs/PCA_covariates.tif')
i='OCS'
model <-readRDS(file = paste0("02-Outputs/model_", i, ".rds"))
final_mod <-model
View(model)
model$finalModel
final_mod <-model$finalModel
#Predict soil attributes per tiles
# loop to predict on each tile
class(final_mod)
#Predict soil attributes per tiles
# loop to predict on each tile
class(final_mod) <-"randomForest"
class(final_mod)
#Load data and covariates stacks based on correlation
covs <-rast( paste0("02-Outputs/", i,"_covariates.tif"))
j=1
r <-covs[[1]]
t <- rast(nrows = 5, ncols = 5, extent = ext(r), crs = crs(r))
tile <- makeTiles(r, t,overwrite=TRUE,filename="02-Outputs/tiles/tiles.tif")
t <- rast(tile[j])
covst <- crop(covs, t)
# plot(r)#
pred_mean <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what="mean",
# filename = paste0("02-Outputs/Final Maps/tiles/", i,"_tile_", j, ".tif"),
# overwrite = TRUE
)
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", type='sd')
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what='sd')
pred_mean
pred_sd
?predict
# plot(r)#
pred_mean <- terra::predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what="mean",
# filename = paste0("02-Outputs/Final Maps/tiles/", i,"_tile_", j, ".tif"),
# overwrite = TRUE
)
pred_sd <- terra::predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest", what='sd')
pred_sd
plot(pred_mean)
plot(pred_sd)
pred_sd <- predict(covst, model = final_mod, na.rm=TRUE,
cpkgs="randomForest")
# plot(r)#
pred_mean <- predict(covst, model = model, na.rm=TRUE,
cpkgs="randomForest", what="mean",
# filename = paste0("02-Outputs/Final Maps/tiles/", i,"_tile_", j, ".tif"),
# overwrite = TRUE
)
pred_sd <- predict(covst, model = model, na.rm=TRUE,
cpkgs="randomForest", what='sd')
pred_mean
pred_sd
#Empty environment and cache
rm(list = ls());
gc()
# Working directory
wd <- 'C:/Users/luottoi/Documents/GitHub/Digital-Soil-Mapping'
#wd <- 'C:/Users/hp/Documents/GitHub/Digital-Soil-Mapping'
#List of soil attributes prepared in script #2
soilatt <- c('OCS','clay', 'pH')
AOI <- '01-Data/MKD.shp'
#
#
#######################################################
# Set working directory
setwd(wd)
############################### Prapare the final table for modelling (regression matrix)
library(tidyverse)
library(data.table)
library(caret)
library(quantregForest)
library(terra)
library(sf)
library(doParallel)
# Load PC covariates (the same for all soil attributes)
covs_pc <- rast('02-Outputs/PCA_covariates.tif')
i='OCS'
#Load data and covariates stacks based on correlation
covs <-rast( paste0("02-Outputs/", i,"_covariates.tif"))
